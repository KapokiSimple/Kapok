import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QWidget, QApplication, QLabel, QDesktopWidget
from PyQt5.QtGui import QStandardItemModel, QFont
from PyQt5 import uic
from PyQt5.QtCore import QTimer, Qt
import RPi.GPIO as GPIO
import serial
import time
import threading

TRIG_PINS = [6, 24, 21, 27]
ECHO_PINS = [5, 23, 20, 17]

class UltrasonicSensor:
    def __init__(self, trigger_pin, echo_pin):
        self.distance = 0
        self.lock = threading.Lock()
        self.trigger_pin = trigger_pin
        self.echo_pin = echo_pin

        GPIO.setup(self.trigger_pin, GPIO.OUT)
        GPIO.setup(self.echo_pin, GPIO.IN)

    def measure_distance(self):
        GPIO.output(self.trigger_pin, True)
        time.sleep(0.00001)
        GPIO.output(self.trigger_pin, False)

        while GPIO.input(self.echo_pin) == 0:
            pulse_start = time.time()
        while GPIO.input(self.echo_pin) == 1:
            pulse_end = time.time()

        pulse_duration = pulse_end - pulse_start
        distance = pulse_duration * 17150
        distance = round(distance, 2)

        with self.lock:
            self.distance = distance

    def get_distance(self):
        with self.lock:
            return self.distance

class SerialThread(threading.Thread):
    def __init__(self,ex, ultrasonic_sensors):
        super().__init__()
        self.serial_port = None
        self.ui = ex
        self.ultrasonic_sensors = ultrasonic_sensors

    def setupSerial(self):
        self.serial_port = serial.Serial("/dev/ttyAMA0", 115200)  # 根据实际串口设备和波特率进行设置
        self.serial_port.flushInput()
        
    def run(self):
        self.setupSerial()
        while True:
            #self.processSerialData()
            for i, sensor in enumerate(self.ultrasonic_sensors):
                sensor.measure_distance()
                distance = sensor.get_distance()
                self.ui.process_distance(i, distance)
            if self.serial_port.in_waiting > 0:
                received_data = self.serial_port.read(1).decode()
                print("data=" + received_data)
                self.processSerialData(received_data)
                time.sleep(3)


    def processSerialData(self,data):
        
        
            if data == '1':
                self.ui.updateLabels(data)
               
            elif data == '2':
                self.ui.updateLabels(data)
                
            elif data == '3':
                self.ui.updateLabels(data)
                
            elif data == '4':
                self.ui.updateLabels(data)
                
    
class UI(QWidget):
    # 初始化
    def __init__(self):
        super().__init__()
        self.harmful = 0
        self.recycle = 0
        self.kitchen = 0
        self.other = 0
        
        self.total = 00
        
       
        
        self.signal1 = ' '
        self.signal2 = ' '
        self.signal3 = ' '
        self.signal4 = ' '
        self.initUI()
        
        
        
        self.ultrasonic_sensors = []
        GPIO.setmode(GPIO.BCM)  
        for trigger_pin, echo_pin in zip(TRIG_PINS, ECHO_PINS):
            sensor = UltrasonicSensor(trigger_pin, echo_pin)
            self.ultrasonic_sensors.append(sensor)
        self.serial_thread = SerialThread(self, self.ultrasonic_sensors)
        #self.setupSerial()

        self.serial_thread.start()

    def process_distance(self, sensor_index, distance):
        print("dis{}: {:.2f}cm".format(sensor_index + 1, distance))
        if sensor_index == 0:
            if distance < 24.50:
                print("溢满")
                self.signal1 = "溢满"
            else:
                self.signal1 = 'free'
        elif sensor_index == 1:
            if distance < 24.50:
                print("溢满")
                self.signal2 = "溢满"
            else:
                self.signal2 = 'free'
        elif sensor_index == 2:
            if distance < 24.50:
                print("溢满")
                self.signal3 = "溢满"
            else:
                self.signal3 = 'free'
        elif sensor_index == 3:
            if distance < 24.50:
                print("溢满")
                self.signal4 = "溢满"
            else:
                self.signal4 = 'free'

    def updateLabels(self,data):
        if data == '1':
            self.harmful += 1
            self.total += 1
            self.harmful_label1.setText(str(self.harmful))
            self.harmful_label2.setText(self.signal1)

        elif data == '2':
            self.recycle += 1
            self.total += 1
            self.recycle_label1.setText(str(self.recycle))
            self.recycle_label2.setText(self.signal2)    
        elif data == '3':
            self.kitchen += 1
            self.total += 1
            self.kitchen_label1.setText(str(self.kitchen))
            self.kitchen_label2.setText(self.signal3)    
        elif data == '4': 
            self.other += 1
            self.total += 1
            self.other_label1.setText(str(self.other))
            self.other_label2.setText(self.signal4)   
    
    def initUI(self):
        # 创建一个GUI
        self.resize(900, 480)
        self.setWindowTitle('垃圾分类')
        self.center()
        
        self.serial_timer = QTimer(self)
        self.serial_timer.setInterval(1000)         
        self.serial_timer.start()

        
        # 标签布局管理
        # 有害垃圾标签
        harmful = QLabel('有害垃圾',self)
        harmful.move(670,100)
        self.harmful_label1 = QLabel('0', self)
        self.harmful_label1.move(750, 100)
        self.harmful_label2= QLabel('free', self)
        self.harmful_label2.move(800, 100)
        
        # 可回收垃圾标签
        recycle = QLabel('可回收垃圾',self)
        recycle.move(670,150)
        self.recycle_label1 = QLabel('0', self)
        self.recycle_label1.move(750, 150)
        self.recycle_label2 = QLabel('free', self)
        self.recycle_label2.move(800, 150)
        
        # 厨余垃圾标签
        kitchen = QLabel('厨余垃圾',self)
        kitchen.move(670,200)
        self.kitchen_label1 = QLabel('0', self)
        self.kitchen_label1.move(750, 200)
        self.kitchen_label2 = QLabel('free', self)
        self.kitchen_label2.move(800, 200)
        
        # 其他垃圾标签
        other = QLabel('其他垃圾',self)
        other.move(670,250)
        self.other_label1 = QLabel('0', self)
        self.other_label1.move(750, 250)
        self.other_label2 = QLabel('free', self)
        self.other_label2.move(800, 250)
        
        #total rubbish
        total = QLabel('total',self)
        total.move(670,300)
        self.total_label1 = QLabel('0', self)
        self.total_label1.move(800, 300)
        
        #identify types of garbage
        types = QLabel('type',self)
        types.move(670,350)
        self.types_label1 = QLabel('0', self)
        self.types_label1.move(800, 350)

        
        
        self.show()
    
    

    def center(self):
        # 窗口居中函数
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    
    
        
        
    
                   
           
                
                   
        
    
if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = UI()
    #ex.initUI()
    
    
    
    timer = QTimer()
    timer.timeout.connect(ex.processSerialData)         
    timer.start(1000)
    
    sys.exit(app.exec_())
